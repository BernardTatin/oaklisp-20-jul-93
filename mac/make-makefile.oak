;;; Copyright (C) 1988, 1992 Barak Pearlmutter & Kevin Lang.

(load "files")

(define (make-makefile name)
  (with-open-file (outfile name out)

    (let* ((aller (lambda (x)
		    (format outfile " ~A.oa" (downcase (string x)))))
	   (aller1 (lambda (x) (if (not (memq x between-files)) (aller x)))))

      (format outfile "

# NOTE: This makefile is automatically generated by make-makefile.oak,
# and should not normally be edited by hand.  New makefiles are
# generated with 'make Makefile'.")

      (format outfile "~%~%COLDFILES =")
      (for-each aller between-files)
      (for-each aller1 all-the-layers)

      (format outfile "~%~%COLDFILESD =")
      (for-each aller all-the-layers)

      (format outfile "~%~%MISCFILES =")
      (for-each aller misc-files)

      (format outfile "~%~%COMPFILES =")
      (for-each aller compiler-files)

      (format outfile "~%~%BATFILES =")
      (for-each aller batch-compiler-files)

      (format outfile "~%~%RNRSFILES =")
      (for-each aller scheme-files)

      (format outfile "

COLDFILESDNX = $(COLDFILESD:.oa=)
TOOLFILES  = tool.oa
FILESFILES = files.oa
MAKEFILES  = make-makefile.oa
# These are gravy.  The first two are our standard benchmarks.  The others
# are neat.
GRAVY = tak.oak compile-bench.oak prolog.oak prolog-examples.oak

ALLOAFILES = $(TOOLFILES) $(MAKEFILES) $(FILESFILES) $(COLDFILES) \\
		$(MISCFILES) $(COMPFILES) $(BATFILES) $(RNRSFILES)

SOURCE = $(ALLOAFILES:.oa=.oak) Makefile

# How we deal with the endianity problem:
#
# Bigendian machines need binary oaklisp worlds with extension .ol*
# while littleendian ones need .lo*.
#
# If on a system without the fancy CMU mods to make, just change the
# line 'E = ol' to 'E = ol' if you are on a littleendian machine
#
# On the other hand, this might work even if you're on such a machine.

VAX_EXT		= lo
PMAX_EXT	= lo
PDP11_EXT	= lo
SUN_EXT		= ol
SUN4_EXT	= ol
IBMRT_EXT	= ol
CONVEX_EXT	= ol
MMAX_EXT	= lo

# default for unknown machines
E = ol

# get the right value now, hoping for soft failure
E = ${$(TARGET_MACHINE)_EXT}



all: Makefile new.$Ez new.$Es

# Make correct_endian_worlds when bringing up a release distributed
# with only a bigendian world on a littleendian machine.

correct_endian_worlds: ../lib/oaklisp.$Ez ../lib/oaklisp.$Es



# How to compile oaklisp source files to make object files:
.SUFFIXES: .oa .oak

.oak.oa:
	oakliszt $*

# Get the compiler sources compiled in the correct locale:
$(COMPFILES) $(BATFILES): $$@k
	oakliszt $* compiler-locale

# How to build a new cold world using the world builder:
new.cold: $(COLDFILES) $(TOOLFILES)
	rm -f new.cold new.sym
	echo \"(load 'tool)(tool-files '($(COLDFILESDNX)) 'new)\"|oaklisp

# How to boot cold worlds into warm worlds:
.SUFFIXES: .$E .cold

.cold.$E:
	../etc/fliw $*.cold $*.$E

# How to load misc stuff into warm worlds:
.SUFFIXES: .$Em .$E

.$E.$Em:
	../etc/fliw $*.$E $*.$Em system-locale $(MISCFILES)

%.$Em       : %.$E       $(MISCFILES)
new.$Em     : new.$E     $(MISCFILES)

# How to load the compiler into misc worlds:
.SUFFIXES: .$Ec .$Em

.$Em.$Ec:
	../etc/fliw $*.$Em $*.$Ec compiler-locale $(COMPFILES)

%.$Ec       : %.$Em       $(COMPFILES)
new.$Ec     : new.$Em     $(COMPFILES)

# How to load the batch compiler into worlds with the compiler in 'em:
.SUFFIXES: .$Ez .$Ec

.$Ec.$Ez:
	../etc/fliw $*.$Ec $*.$Ez compiler-locale $(BATFILES)

%.$Ez       : %.$Ec       $(BATFILES)
new.$Ez     : new.$Ec     $(BATFILES)

# How to load the scheme compatibility package:
.SUFFIXES: .$Es .$Ec

.$Ec.$Es:
	../etc/fliw $*.$Ec $*.$Es system-locale scheme-upgrade

%.$Es       : %.$Ec       $(RNRSFILES)
new.$Es     : new.$Ec     $(RNRSFILES)
oaklisp.$Es : oaklisp.$Ec $(RNRSFILES)






# How to rebuild this makefile:

Makefile: $(MAKEFILES) $(FILESFILES)
	echo '(load \"make-makefile\")(make-makefile \"Makefile\")'|oaklisp


clean-oa-files:
	rm -f $(ALLOAFILES)

echosource:
	echo $(SOURCE)

# What goes in an official release:

release:
	copy -l $(SOURCE) $(GRAVY) ../$(TRELEASEDIR)

#end of long automatically generated Makefile.~%")))
  name)
